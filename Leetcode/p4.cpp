#include "bits/stdc++.h"

using namespace std;

vector<int> merge(vector<int> &nums1, vector<int> &nums2) {
    int i = 0, j = 0;
    int m = nums1.size(), n = nums2.size();
    vector<int> ret;
    while (i < m && j < n) {
        if (nums1[i] < nums2[j]) {
            ret.push_back(nums1[i]);
            i++;
        } else {
            ret.push_back(nums2[j]);
            j++;
        }
    }
    while (i < m) {
        ret.push_back(nums1[i]);
        i++;
    }
    while (j < n) {
        ret.push_back(nums2[j]);
        j++;
    }
    return ret;
}

double findMedianSortedArrays(vector<int> &nums1, vector<int> &nums2) {
    vector<int> ret = merge(nums1, nums2);
    if (ret.size() % 2 == 0) return (ret[ret.size() / 2 - 1] + ret[ret.size() / 2]) / 2.0;
    else return ret[ret.size() / 2] * 1.0;

}


int findMedianinTwoSortedAray(vector<int> &arr1, vector<int> &arr2) {
    int m = arr1.size();
    int n = arr2.size();
    int len = m + n;
    int left = -1, right = -1;
    int aStart = 0, bStart = 0;
    for (int i = 0; i <= len / 2; i++) {
        left = right;
        if (aStart < m && (bStart >= n || arr1[aStart] < arr2[bStart])) {
            right = arr1[aStart++];
        } else {
            right = arr2[bStart++];
        }
    }
    return left;
}

int findMedianinTwoSortedAray2(vector<int> &arr1, vector<int> &arr2) {
    int m = arr1.size();
    int n = arr2.size();
    int left_1 = 0, right_1 = m - 1;
    int mid_1 = 0;

    int left_2 = 0, right_2 = n - 1;
    int mid_2 = 0;
    int k = (m + n) / 2;
    int ret;
    while (left_1 <= right_1 && left_2 <= right_2) {

        mid_1 = (right_1 - left_1) / 2 + left_1;
        mid_2 = (right_2 - left_2) / 2 + left_2;
        if (arr1[mid_1] <= arr2[mid_2]) {
            k -= (mid_1 - left_1);
            left_1 = mid_1;
            if (k == 0) {
                return min(arr1[mid_1], arr2[left_2]);
            }
        } else {
            k -= (mid_2 - left_2);
            left_2 = mid_2;
            ret = arr2[mid_2];
            if (k == 0) {
                return min(arr2[mid_2], arr1[left_1]);
            }
        }

    }
    if (left_1 > right_1) {
        return arr2[left_2];
    }
    if (left_2 > right_2) {
        return arr1[left_1];
    }

    return -1;
}


int main() {
    vector<int> arr1 = {14,
    83, 88, 175, 193, 216, 284, 371, 400, 453, 495, 553, 556, 579, 626, 626, 688, 690, 767, 827, 909, 987, 1038, 1058, 1132, 1223, 1241, 1295, 1344, 1348, 1436, 1514, 1555, 1575, 1670, 1671, 1769, 1828, 1884, 1892, 1902, 1931, 1980, 2037, 2069, 2126, 2150, 2231, 2294, 2295, 2352, 2387, 2467, 2471, 2517, 2540, 2598, 2662, 2674, 2697, 2701, 2762, 2827, 2906, 2926, 2952, 2960, 3035, 3107, 3157, 3241, 3321, 3367, 3369, 3382, 3468, 3552, 3589, 3620, 3628, 3639, 3738, 3743, 3812, 3891, 3978, 4003, 4051, 4055, 4098, 4178, 4180, 4263, 4316, 4336, 4350, 4446, 4533, 4541, 4589, 4592, 4614, 4690, 4752, 4780, 4804, 4870, 4938, 4941, 5024, 5084, 5118, 5122, 5219, 5302, 5369, 5397, 5470, 5537, 5573, 5581, 5679, 5683, 5745, 5774, 5849, 5902, 5942, 6031, 6062, 6120, 6140, 6195, 6205, 6212, 6260, 6353, 6400, 6443, 6499, 6529, 6564, 6619, 6673, 6727, 6784, 6808, 6897, 6931, 6959, 7005, 7079, 7158, 7221, 7226, 7257, 7272, 7311, 7394, 7451, 7544, 7602, 7694, 7743, 7795, 7864, 7939, 7981, 8033, 8088, 8106, 8163, 8195, 8208, 8251, 8320, 8331, 8408, 8504, 8590, 8627, 8690, 8706, 8753, 8789, 8793, 8868, 8967, 9003, 9012, 9032, 9032, 9054, 9118, 9166, 9243, 9322, 9359, 9385, 9475, 9540, 9572, 9605, 9641, 9715, 9736, 9746, 9801, 9810, 9862, 9868, 9934, 9935, 9973, 10059, 10117, 10192, 10247, 10320, 10359, 10415, 10476, 10530, 10580, 10607, 10648, 10747, 10759, 10775, 10840, 10905, 10946, 10946, 10972, 11005, 11022, 11101, 11176, 11234, 11293, 11385, 11394, 11422, 11453, 11508, 11604, 11688, 11765, 11838, 11852, 11917, 12007, 12034, 12121, 12219, 12245, 12289, 12342, 12431, 12510, 12579, 12600, 12612, 12670, 12712, 12797, 12831, 12842, 12941, 12952, 12996, 13069, 13083, 13125, 13133, 13167, 13253, 13316, 13409, 13425, 13474, 13485, 13566, 13640, 13674, 13737, 13757, 13846, 13928, 13985, 14083, 14149, 14225, 14246, 14256, 14326, 14340, 14429, 14480, 14503, 14585, 14630, 14705, 14768, 14777, 14819, 14846, 14904, 14983, 14997, 15044, 15140, 15143, 15220, 15246, 15285, 15341, 15423, 15494, 15533, 15629, 15708, 15749, 15829, 15897, 15962, 15983, 16003, 16024, 16075, 16085, 16165, 16202, 16244, 16293, 16355, 16375, 16444, 16513, 16586, 16599, 16604, 16640, 16685, 16729, 16769, 16841, 16935, 17033, 17047, 17104, 17123, 17177, 17253, 17260, 17281, 17319, 17352, 17443, 17529, 17574, 17655, 17720, 17787, 17854, 17870, 17918, 17971, 18043, 18122, 18211, 18218, 18310
    vector<int> arr2 = {4, 5, 6, 7};
    int ret = findMedianinTwoSortedAray2(arr1, arr2);
    return 0;
}